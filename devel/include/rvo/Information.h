// Generated by gencpp from file rvo/Information.msg
// DO NOT EDIT!


#ifndef RVO_MESSAGE_INFORMATION_H
#define RVO_MESSAGE_INFORMATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rvo
{
template <class ContainerAllocator>
struct Information_
{
  typedef Information_<ContainerAllocator> Type;

  Information_()
    : agent_name()
    , agent_pose_x(0.0)
    , agent_pose_y(0.0)
    , agent_heading(0.0)
    , agent_vel_mag(0.0)  {
    }
  Information_(const ContainerAllocator& _alloc)
    : agent_name(_alloc)
    , agent_pose_x(0.0)
    , agent_pose_y(0.0)
    , agent_heading(0.0)
    , agent_vel_mag(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _agent_name_type;
  _agent_name_type agent_name;

   typedef double _agent_pose_x_type;
  _agent_pose_x_type agent_pose_x;

   typedef double _agent_pose_y_type;
  _agent_pose_y_type agent_pose_y;

   typedef double _agent_heading_type;
  _agent_heading_type agent_heading;

   typedef double _agent_vel_mag_type;
  _agent_vel_mag_type agent_vel_mag;





  typedef boost::shared_ptr< ::rvo::Information_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rvo::Information_<ContainerAllocator> const> ConstPtr;

}; // struct Information_

typedef ::rvo::Information_<std::allocator<void> > Information;

typedef boost::shared_ptr< ::rvo::Information > InformationPtr;
typedef boost::shared_ptr< ::rvo::Information const> InformationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rvo::Information_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rvo::Information_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rvo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'rvo': ['/home/wenbing/Learning_ROS_ws/src/RVO_rospy/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rvo::Information_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rvo::Information_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rvo::Information_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rvo::Information_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rvo::Information_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rvo::Information_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rvo::Information_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a69941d7ce3cf8fc435842c1ef18e37d";
  }

  static const char* value(const ::rvo::Information_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa69941d7ce3cf8fcULL;
  static const uint64_t static_value2 = 0x435842c1ef18e37dULL;
};

template<class ContainerAllocator>
struct DataType< ::rvo::Information_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rvo/Information";
  }

  static const char* value(const ::rvo::Information_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rvo::Information_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string agent_name\n\
\n\
float64 agent_pose_x\n\
float64 agent_pose_y\n\
float64 agent_heading\n\
float64 agent_vel_mag\n\
";
  }

  static const char* value(const ::rvo::Information_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rvo::Information_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.agent_name);
      stream.next(m.agent_pose_x);
      stream.next(m.agent_pose_y);
      stream.next(m.agent_heading);
      stream.next(m.agent_vel_mag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Information_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rvo::Information_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rvo::Information_<ContainerAllocator>& v)
  {
    s << indent << "agent_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.agent_name);
    s << indent << "agent_pose_x: ";
    Printer<double>::stream(s, indent + "  ", v.agent_pose_x);
    s << indent << "agent_pose_y: ";
    Printer<double>::stream(s, indent + "  ", v.agent_pose_y);
    s << indent << "agent_heading: ";
    Printer<double>::stream(s, indent + "  ", v.agent_heading);
    s << indent << "agent_vel_mag: ";
    Printer<double>::stream(s, indent + "  ", v.agent_vel_mag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RVO_MESSAGE_INFORMATION_H
